{"version":3,"sources":["ClueSheet.js","reportWebVitals.js","index.js"],"names":["ClueSheet","playerNumber","default","min","max","iconDataIndex","v","x","setCheckBoxesValueRow","row","value","arguments","length","undefined","cellIConData","checkBoxesValues","forEach","_","column","setCheckBoxesValue","checkBoxesValuesNew","slice","setCheckBoxesValues","getColumnHeaderClassName","filter","rows","numberOfCardsPerPlayer","numberOfPlayersDefault","numberOfItems","Object","keys","sheetItemData","map","key","reduce","_useState","useState","Array","from","fill","_useState2","slicedToArray","useEffect","itemRowHeadersClassNamesNew","itemRowHeadersClassNames","i","every","includes","setItemRowHeadersClassNames","columnHeaderClassNamesNew","columnHeaderClassNames","setColumnHeaderClassNames","_useState3","_useState4","numberOfPlayers","setNumberOfPlayers","valueNew","numberOfCardsPerPlayerNew","Math","floor","setNumberOfCardsPerPlayer","_useState5","_useState6","_useState7","_useState8","_useState9","k","_useState10","columnHeaderValues","setColumnHeaderValues","_useState11","_useState12","CheckBoxes","props","index","react_default","a","createElement","StrictMode","className","onChange","e","target","defaultValue","onClick","columnHeaderValuesNew","prompt","editColumnHeaderValue","offset","headerRow","Josa","c","colSpan","itemRows","onDoubleClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_ClueSheet"],"mappings":"2uBA+NeA,MAzNf,WAEE,IAAMC,EAAe,CACnBC,QAAS,EACTC,IAAK,EACLC,IAAK,GAGDC,EAAgB,CACpBH,QAAS,EACTI,EAAG,EACHC,EAAG,GAGL,SAASC,EAAsBC,GAAkD,IAA7CC,EAA6CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArCG,EAAaT,EAAcH,SACrEa,EAAiBN,GAAKO,QAAQ,SAACC,EAAGC,GAAJ,OAAeC,EAAmBV,EAAKS,EAAQR,KAG/E,SAASS,EAAmBV,EAAKS,EAAQR,GACvC,IAAIU,EAAsBL,EAAiBM,QACvCX,IAAUI,EAAaT,EAAcC,IACvCE,EAAsBC,EAAKK,EAAaT,EAAcE,IACxDa,EAAoBX,GAAKS,GAAUR,EACnCY,EAAoBF,GAwBtB,SAASG,EAAyBL,GAEhC,OADgBH,EAAiBS,OAAO,SAACC,GAAD,OAAUA,EAAKP,KAAYJ,EAAaT,EAAcC,KAAIM,QACnFc,EACN,UACF,SAGT,IAAMC,EAAyB1B,EAAaC,QACtC0B,EAtB0BC,OAAOC,KAAKC,GAAeC,IAAI,SAACC,GAAD,OAASF,EAAcE,GAAKrB,SAC5DsB,OAAO,SAACN,EAAehB,GAAhB,OAA2BgB,EAAgBhB,IAlC9DuB,EAyD6BC,mBAASC,MAAMC,KAAK,CAAE1B,OAAQgB,GAAiB,kBAAM,IAAIS,MAAMpC,EAAaG,KAAKmC,KAAKzB,EAAaT,EAAcH,aAzD9IsC,EAAAX,OAAAY,EAAA,EAAAZ,CAAAM,EAAA,GAyDZpB,EAzDYyB,EAAA,GAyDMlB,EAzDNkB,EAAA,GA0DnBE,oBAAU,WACR,IAAMC,EAA8BC,EAAyBZ,IAAI,SAACf,EAAG4B,GAAJ,OArB7D9B,EADyBN,EAsBoEoC,GArBvEC,MAAM,SAACxC,GAAD,OAAQA,IAAMQ,EAAaT,EAAcE,KAChE,WAELQ,EAAiBN,GAAKsC,SAASjC,EAAaT,EAAcC,IACrD,UAEF,SAPT,IAA+BG,IAuB7BuC,EAA4BL,GAE5B,IAAMM,EAA4BC,EAAuBlB,IAAI,SAACf,EAAG4B,GAAJ,OAAUtB,EAAyBsB,KAChGM,EAA0BF,IACzB,CAAClC,IAhEe,IAAAqC,EAkE2BhB,mBAAST,GAlEpC0B,EAAAxB,OAAAY,EAAA,EAAAZ,CAAAuB,EAAA,GAkEZE,EAlEYD,EAAA,GAkEKE,EAlELF,EAAA,GAmEnBX,oBAAU,WACR,IAAMtB,EAAsBL,EAAiBiB,IAAI,SAAC1B,EAAGG,GAAJ,OAAYH,EAAE0B,IAAI,SAACtB,EAAOQ,GACzE,GAAIA,GAAUoC,EAAiB,CAC7B,IAAME,EAAW1C,EAAaT,EAAcH,SAG5C,OAFIsD,IAAa9C,GACfS,EAAmBV,EAAKS,EAAQsC,GAC3BA,EAET,OAAO9C,MAETY,EAAoBF,GAEpB,IAAMqC,EAA4BC,KAAKC,MAAM/B,EAAgB0B,GAC7DM,EAA0BH,IACzB,CAACH,IAjFe,IAAAO,EAmFyCzB,mBAASsB,KAAKC,MAAM/B,EAC9ED,IApFiBmC,EAAAjC,OAAAY,EAAA,EAAAZ,CAAAgC,EAAA,GAmFZnC,EAnFYoC,EAAA,GAmFYF,EAnFZE,EAAA,GAqFnBpB,oBAAU,WACR,IAAMO,EAA4BC,EAAuBlB,IAAI,SAAC1B,EAAGuC,GAAJ,OAAUtB,EAAyBR,KAChGoC,EAA0BF,IACzB,CAACvB,IAxFe,IAAAqC,EA0FyC3B,mBAAS,IAAIC,MAAMpC,EAAaG,KAAKmC,KAAK,SA1FnFyB,EAAAnC,OAAAY,EAAA,EAAAZ,CAAAkC,EAAA,GA0FZb,EA1FYc,EAAA,GA0FYb,EA1FZa,EAAA,GAAAC,EA4FiC7B,mBAASC,MAAMC,KAAK,CAAE1B,OAAQX,EAAaG,KAAO,SAACa,EAAGiD,GAAJ,MAAU,KAAOA,EAAI,MA5FxGC,EAAAtC,OAAAY,EAAA,EAAAZ,CAAAoC,EAAA,GA4FZG,EA5FYD,EAAA,GA4FQE,EA5FRF,EAAA,GAAAG,EA8F6ClC,mBAAS,IAAIC,MAAMT,GAAeW,KAAK,WA9FpFgC,EAAA1C,OAAAY,EAAA,EAAAZ,CAAAyC,EAAA,GA8FZ1B,EA9FY2B,EAAA,GA8FcvB,EA9FduB,EAAA,GA+HnB,SAASC,EAAWC,GAClB,IAAMhE,EAAMgE,EAAMC,MAClB,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,KAEIzC,MAAMC,KAAK,CAAE1B,OAAQ0C,GAAoB,SAACrC,EAAGC,GAC3C,OACEyD,EAAAC,EAAAC,cAAA,MAAI5C,IAAKf,EAAQ6D,UAAU,QACzBJ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,OAAOrE,MAAOK,EAAiBN,GAAKS,GAAS8D,SAAU,SAACC,GAAD,OAAO9D,EAAmBV,EAAKS,EAAQ+D,EAAEC,OAAOxE,SACtH2B,MAAMC,KAAKxB,EAAc,SAACR,EAAGuC,GAAJ,OAAU8B,EAAAC,EAAAC,cAAA,UAAQ5C,IAAKY,GAAIvC,WAoEvE,OACEqE,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,KACEH,EAAAC,EAAAC,cA9GJ,WACE,IAAM1E,EAAMF,EAAaE,IACnBC,EAAMH,EAAaG,IACzB,OACIuE,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBACdJ,EAAAC,EAAAC,cAAA,aACG,oCACDF,EAAAC,EAAAC,cAAA,UAAQM,aAAc7B,EAAiBnD,IAAKA,EAAKC,IAAKA,EAAK4E,SAAU,SAACC,GAAD,OAAO1B,EAAmB0B,EAAEC,OAAOxE,SACrG2B,MAAMC,KAAK,CAAE1B,OAASR,EAAMD,EAAM,GAAM,SAACc,EAAG4B,GAAJ,OAAU8B,EAAAC,EAAAC,cAAA,UAAQ5C,IAAKY,GAAIA,EAAI1C,MAEzE,aAoGP,MACAwE,EAAAC,EAAAC,cA/FJ,WACE,OACEF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBACdJ,EAAAC,EAAAC,cAAA,aACG,sCACDF,EAAAC,EAAAC,cAAA,UAAQM,aAAczD,EAAwBvB,IAAK,EAAGC,IAAKwB,EAAeoD,SAAU,SAACC,GAAD,OAAOrB,EAA0BqB,EAAEC,OAAOxE,SAC3H2B,MAAMC,KAAK,CAAE1B,OAAQX,EAAaG,KAAO,SAACa,EAAG4B,GAAJ,OAAU8B,EAAAC,EAAAC,cAAA,UAAQ5C,IAAKY,GAAIA,EAAI,MAE1E,aAuFL,MACA8B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cA9DN,WACE,OACEF,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,CAAkB7C,IAAI,gBACpB0C,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAQ9C,IAAK,IAEzBI,MAAMC,KAAK,CAAE1B,OAAQ0C,GAAmB,SAAChD,EAAGuC,GAC1C,OACE8B,EAAAC,EAAAC,cAAA,MAAI5C,IAAKY,EAAI,EAAGkC,UAAW7B,EAAuBL,GAAIuC,QAAS,kBAnI/E,SAA+BlE,GAC7B,IAAImE,EAAwBjB,EAAmB/C,QAC/CgE,EAAsBnE,GAAUoE,OAAO,uEAAiBlB,EAAmBlD,IAC3EmD,EAAsBgB,GAgI6DE,CAAsB1C,KAAKuB,EAAmBvB,UAqD7H,MACA8B,EAAAC,EAAAC,cA5CN,WACE,IAAIW,EAAS,EACb,OACEb,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,CAAkB7C,IAAI,cACpB0C,EAAAC,EAAAC,cAAA,aAEIhD,OAAOC,KAAKC,GAAeC,IAAI,SAACC,EAAKyC,GACnC,IAAMe,EACJd,EAAAC,EAAAC,cAAA,MAAI5C,IAAKyC,GACLC,EAAAC,EAAAC,cAAA,MAAI5C,IAAKA,EAAK8C,UAAU,QAAQ9C,EAAMyD,IAAKC,EAAE1D,EAAK,iBAAS,KAC3D0C,EAAAC,EAAAC,cAAA,MAAI5C,IAAKA,EAAM,SAAU8C,UAAU,QAAQa,QAASjE,KAIpDkE,EAAW9D,EAAcE,GAAKD,IAAI,SAAC1B,EAAGuC,GAC1C,IAAMpC,EAAO+E,EAAS3C,EACtB,OACE8B,EAAAC,EAAAC,cAAA,MAAI5C,IAAKxB,GACPkE,EAAAC,EAAAC,cAAA,MAAI5C,IAAKxB,EAAKsE,UAAWnC,EAAyBnC,GAAMqF,cAAe,WAAQtF,EAAsBC,EAAKK,EAAaT,EAAcE,MAAQD,GAC7IqE,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOjE,OAMzB,OAFA+E,GAAUzD,EAAcE,GAAKrB,OAG3B+D,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,CAAkB7C,IAAKyC,GACpBe,EACAI,QAgBX,SC7MOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAjB,EAAA,GAAAkB,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,KACEH,EAAAC,EAAAC,cAACmC,EAAD,QAOJjB","file":"static/js/main.a8c915d0.chunk.js","sourcesContent":["import './ClueSheet.css';\nimport React, { useEffect, useState } from 'react';\nimport Josa from 'josa-js';\nimport sheetItemData from './item.json'\nimport cellIConData from './icon.json'\n\nfunction ClueSheet() {\n\n  const playerNumber = {\n    default: 7,\n    min: 2,\n    max: 7,\n  };\n\n  const iconDataIndex = {\n    default: 0,\n    v: 1,\n    x: 2,\n  };\n\n  function setCheckBoxesValueRow(row, value = cellIConData[iconDataIndex.default]) {\n    checkBoxesValues[row].forEach((_, column) => setCheckBoxesValue(row, column, value));\n  }\n\n  function setCheckBoxesValue(row, column, value) {\n    let checkBoxesValuesNew = checkBoxesValues.slice();\n    if (value === cellIConData[iconDataIndex.v])\n      setCheckBoxesValueRow(row, cellIConData[iconDataIndex.x]);\n    checkBoxesValuesNew[row][column] = value;\n    setCheckBoxesValues(checkBoxesValuesNew);\n  }\n\n  function editColumnHeaderValue(column) {\n    let columnHeaderValuesNew = columnHeaderValues.slice();\n    columnHeaderValuesNew[column] = prompt(\"새로운 이름을 입력하세요\", columnHeaderValues[column]);\n    setColumnHeaderValues(columnHeaderValuesNew);\n  }\n\n  function getNumberOfItems() {\n    const sheetItemDatalengthes = Object.keys(sheetItemData).map((key) => sheetItemData[key].length);\n    return sheetItemDatalengthes.reduce((numberOfItems, length) => numberOfItems + length)\n  }\n\n  function getRowHeaderClassName(row) {\n    if (checkBoxesValues[row].every((v) => (v === cellIConData[iconDataIndex.x])))\n      return 'expected'\n\n    if (checkBoxesValues[row].includes(cellIConData[iconDataIndex.v]))\n      return 'checked';\n\n    return 'normal';\n  }\n\n  function getColumnHeaderClassName(column) {\n    const checked = checkBoxesValues.filter((rows) => rows[column] === cellIConData[iconDataIndex.v]).length;\n    if (checked >= numberOfCardsPerPlayer)\n      return 'checked';\n    return 'header';\n  }\n\n  const numberOfPlayersDefault = playerNumber.default;\n  const numberOfItems = getNumberOfItems();\n\n  const [checkBoxesValues, setCheckBoxesValues] = useState(Array.from({ length: numberOfItems }, () => new Array(playerNumber.max).fill(cellIConData[iconDataIndex.default])));\n  useEffect(() => {\n    const itemRowHeadersClassNamesNew = itemRowHeadersClassNames.map((_, i) => getRowHeaderClassName(i));\n    setItemRowHeadersClassNames(itemRowHeadersClassNamesNew);\n\n    const columnHeaderClassNamesNew = columnHeaderClassNames.map((_, i) => getColumnHeaderClassName(i));\n    setColumnHeaderClassNames(columnHeaderClassNamesNew);\n  }, [checkBoxesValues]);\n\n  const [numberOfPlayers, setNumberOfPlayers] = useState(numberOfPlayersDefault);\n  useEffect(() => {\n    const checkBoxesValuesNew = checkBoxesValues.map((v, row) => v.map((value, column) => {\n      if (column >= numberOfPlayers) {\n        const valueNew = cellIConData[iconDataIndex.default];\n        if (valueNew !== value)\n          setCheckBoxesValue(row, column, valueNew);\n        return valueNew;\n      }\n      return value;\n    }));\n    setCheckBoxesValues(checkBoxesValuesNew);\n\n    const numberOfCardsPerPlayerNew = Math.floor(numberOfItems / numberOfPlayers);\n    setNumberOfCardsPerPlayer(numberOfCardsPerPlayerNew);\n  }, [numberOfPlayers]);\n\n  const [numberOfCardsPerPlayer, setNumberOfCardsPerPlayer] = useState(Math.floor(numberOfItems /\n    numberOfPlayersDefault));\n  useEffect(() => {\n    const columnHeaderClassNamesNew = columnHeaderClassNames.map((v, i) => getColumnHeaderClassName(checkBoxesValues, i));\n    setColumnHeaderClassNames(columnHeaderClassNamesNew);\n  }, [numberOfCardsPerPlayer]);\n\n  const [columnHeaderClassNames, setColumnHeaderClassNames] = useState(new Array(playerNumber.max).fill('head'));\n\n  const [columnHeaderValues, setColumnHeaderValues] = useState(Array.from({ length: playerNumber.max }, (_, k) => \"P\" + (k + 1)));\n\n  const [itemRowHeadersClassNames, setItemRowHeadersClassNames] = useState(new Array(numberOfItems).fill('normal'));\n\n\n  function NumberOfPlayersInput() {\n    const min = playerNumber.min;\n    const max = playerNumber.max;\n    return (\n        <form className='number-setting'>\n          <label>\n            {'플레이어 수: '}\n            <select defaultValue={numberOfPlayers} min={min} max={max} onChange={(e) => setNumberOfPlayers(e.target.value)}>\n              {Array.from({ length: (max - min + 1) }, (_, i) => <option key={i}>{i + min}</option>)}\n            </select>\n            {' 명'}\n          </label>\n        </form>\n    );\n  }\n\n  function NumberOfCardsPerPlayerInput() {\n    return (\n      <form className='number-setting'>\n        <label>\n          {'1인당 카드 수: '}\n          <select defaultValue={numberOfCardsPerPlayer} min={1} max={numberOfItems} onChange={(e) => setNumberOfCardsPerPlayer(e.target.value)}>\n            {Array.from({ length: playerNumber.max }, (_, i) => <option key={i}>{i + 1}</option>)}\n          </select>\n          {' 장'}\n        </label>\n      </form>\n    );\n  }\n\n  function CheckBoxes(props) {\n    const row = props.index;\n    return (\n      <React.StrictMode>\n        {\n          Array.from({ length: numberOfPlayers }, ((_, column) => {\n            return (\n              <td key={column} className='cell'>\n                <form>\n                  <select className='cell' value={checkBoxesValues[row][column]} onChange={(e) => setCheckBoxesValue(row, column, e.target.value)}>\n                    {Array.from(cellIConData, (v, i) => <option key={i}>{v}</option>)}\n                  </select>\n                </form>\n              </td>\n            );\n          }))\n        }\n      </React.StrictMode>\n    );\n  }\n\n  function TableHeader() {\n    return (\n      <React.StrictMode key='table-header'>\n        <thead>\n          <tr>\n            <td className='empty' key={0} />\n            {\n              Array.from({ length: numberOfPlayers }, (v, i) => {\n                return (\n                  <th key={i + 1} className={columnHeaderClassNames[i]} onClick={() => editColumnHeaderValue(i)}>{columnHeaderValues[i]}</th>\n                );\n              })\n            }\n          </tr>\n        </thead>\n      </React.StrictMode>\n    );\n  }\n\n  function TableBody() {\n    let offset = 0;\n    return (\n      <React.StrictMode key='table-body'>\n        <tbody>\n          {\n            Object.keys(sheetItemData).map((key, index) => {\n              const headerRow = (\n                <tr key={index}>\n                    <td key={key} className='head'>{key + Josa.c(key, '은/는') + '?'}</td>\n                    <td key={key + '-empty'} className='empty' colSpan={numberOfPlayersDefault} />\n                  </tr>\n              );\n\n              const itemRows = sheetItemData[key].map((v, i) => {\n                const row = (offset + i);\n                return (\n                  <tr key={row}>\n                    <td key={row} className={itemRowHeadersClassNames[row]} onDoubleClick={() => { setCheckBoxesValueRow(row, cellIConData[iconDataIndex.x]) }}>{v}</td>\n                    <CheckBoxes index={row} />\n                  </tr>\n                )\n              });\n              offset += sheetItemData[key].length;\n\n              return (\n                <React.StrictMode key={index}>\n                  {headerRow}\n                  {itemRows}\n                </React.StrictMode>\n              )\n            })\n          }\n        </tbody>\n      </React.StrictMode>\n    )\n  }\n\n  return (\n    <React.StrictMode>\n      <NumberOfPlayersInput />\n      <NumberOfCardsPerPlayerInput />\n      <table>\n        <TableHeader />\n        <TableBody />\n      </table>\n    </React.StrictMode>\n  );\n}\n\nexport default ClueSheet;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport ClueSheet from './ClueSheet';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <ClueSheet />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}