{"version":3,"sources":["ClueSheet.js","reportWebVitals.js","index.js"],"names":["Icons","index","arguments","length","undefined","cellIConData","default","check","ClueSheet","number","min","max","numberOfPlayersDefault","numberOfItems","numberOfItemsDefault","Object","keys","sheetItemData","forEach","v","getDefaultNumberOfItems","_useState","useState","_useState2","slicedToArray","numberOfPlayers","setNumberOfPlayers","_useState3","Math","floor","_useState4","numberOfCardsPerPlayer","setNumberOfCardsPerPlayer","_useState5","Array","fill","_useState6","columnHeaderClassNames","setColumnHeaderClassNames","_useState7","from","_","k","_useState8","columnHeaderValues","setColumnHeaderValues","_useState9","_useState10","itemRowHeadersClassNames","setItemRowHeadersClassNames","_useState11","map","row","get","_useState12","checkBoxesValues","setCheckBoxesValues","onChangeCell","column","value","checkBoxesValuesNew","slice","console","log","itemRowHeadersClassNamesNew","checkBoxes","includes","checkRowHeaderClassName","columnHeaderClassNamesNew","filter","rows","checkColumnHeaderClassName","CheckBoxOptions","i","react_default","a","createElement","key","CheckBoxes","props","StrictMode","className","name","type","onChange","e","target","defaultValue","options","numberOfPlayersNew","icon","onChangeNumberOfPlayers","onClick","columnHeaderValuesNew","prompt","onClickTableHeader","offset","keyIndex","itemRows","Josa","c","colSpan","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_ClueSheet"],"mappings":"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","file":"static/js/main.64990d6b.chunk.js","sourcesContent":["import './ClueSheet.css';\nimport React, { useState } from 'react';\nimport Josa from 'josa-js';\nimport sheetItemData from './item.json'\nimport cellIConData from './icon.json'\n\nclass Icons {\n  static index = {\n    default: 0,\n    check: 1,\n  }\n\n  static get(index = undefined) {\n    if (index === undefined)\n      return cellIConData;\n    return cellIConData[index];\n  }\n}\n\nfunction ClueSheet() {\n\n  const number = { min: 2, max: 7, default: 7 };\n\n  function getDefaultNumberOfItems() {\n    let numberOfItemsDefault = 0;\n    Object.keys(sheetItemData).forEach((v) => numberOfItemsDefault += sheetItemData[v].length);\n    return numberOfItemsDefault;\n  }\n\n  const numberOfPlayersDefault = number.default;\n  const numberOfItems = getDefaultNumberOfItems();\n  const [numberOfPlayers, setNumberOfPlayers] = useState(numberOfPlayersDefault);\n  const [numberOfCardsPerPlayer, setNumberOfCardsPerPlayer] = useState(Math.floor(numberOfItems /\n  numberOfPlayersDefault));\n  const [columnHeaderClassNames, setColumnHeaderClassNames] = useState(new Array(number.max).fill('head'));\n  const [columnHeaderValues, setColumnHeaderValues] = useState(Array.from({length: number.max}, (_, k) => \"P\"+(k+1)));\n  const [itemRowHeadersClassNames, setItemRowHeadersClassNames] = useState(new Array(numberOfItems).fill('normal'));\n  const [checkBoxesValues, setCheckBoxesValues] = useState(new Array(numberOfItems).fill(0).map(row => new Array(number.max).fill(Icons.get(Icons.index.default))));\n\n  function checkRowHeaderClassName(checkBoxes, row) {\n    if (checkBoxes[row].includes(Icons.get(Icons.index.check)))\n      return 'checked';\n    return 'normal';\n  }\n\n  function checkColumnHeaderClassName(checkBoxes, column) {\n    if (checkBoxes.filter((rows) => rows[column] === Icons.get(Icons.index.check)).length >= numberOfCardsPerPlayer)\n      return 'checked';\n    return 'header';\n  }\n\n  function onChangeCell(row, column, value) {\n    let checkBoxesValuesNew = checkBoxesValues.slice();\n    checkBoxesValuesNew[row][column] = value;\n    setCheckBoxesValues(checkBoxesValuesNew);\n    console.log(checkBoxesValuesNew);\n\n    let itemRowHeadersClassNamesNew = itemRowHeadersClassNames.slice();\n    itemRowHeadersClassNamesNew[row] = checkRowHeaderClassName(checkBoxesValuesNew, row);\n    setItemRowHeadersClassNames(itemRowHeadersClassNamesNew);\n\n    let columnHeaderClassNamesNew = columnHeaderClassNames.slice();\n    columnHeaderClassNamesNew[column] = checkColumnHeaderClassName(checkBoxesValuesNew, column);\n    setColumnHeaderClassNames(columnHeaderClassNamesNew);\n  }\n\n  function onChangeNumberOfPlayers(numberOfPlayersNew) {\n    let checkBoxesValuesNew = checkBoxesValues.map((v) => v.map((icon, i) => (i > numberOfPlayersNew) ? Icons.get(Icons.index.default) : icon));\n    setCheckBoxesValues(checkBoxesValuesNew);\n    setNumberOfCardsPerPlayer(Math.floor((numberOfItems/numberOfPlayersNew)));\n    setNumberOfPlayers(numberOfPlayersNew);\n  }\n\n  function NumberOfPlayersInput() {\n    const name = 'numer-of-players';\n    const min = number.min;\n    const max = number.max;\n    const defaultValue = numberOfPlayers;\n    const options = Array.from({ length: (max - min + 1) }, (_, i) => <option key={i}>{i+min}</option>);\n    return (\n      <React.StrictMode key={name}>\n        <form key={name} className={name}>\n          <label>\n            {'플레이어 수: '}\n            <select name={name} className={name} defaultValue={defaultValue} min={min} max={max} onChange={(e) => onChangeNumberOfPlayers(e.target.value)}>\n              {options}\n            </select>\n            {' 명'}\n          </label>\n        </form>\n      </React.StrictMode>\n    );\n  }\n\n  function NumberOfCardsPerPlayerInput() {\n    const name = 'number-of-cards-per-player';\n    const min = 1;\n    const max = numberOfItems;\n    const defaultValue = numberOfCardsPerPlayer;\n    const options = Array.from({ length: (max - min + 1) }, (v, i) => <option key={i}>{i + min}</option>);\n    return (\n      <React.StrictMode key={name}>\n        <form key={name} className={name}>\n          <label>\n            {'1인당 카드 수: '}\n            <select name={name} className={name} defaultValue={defaultValue} min={min} max={max} onChange={(e) => setNumberOfCardsPerPlayer(e.target.value)}>\n              {options}\n            </select>\n            {' 장'}\n          </label>\n        </form>\n      </React.StrictMode>\n    );\n  }\n\n  function CheckBoxOptions() {\n    return Array.from(Icons.get(), (v, i) => <option key={i}>{v}</option>);\n  }\n\n  function CheckBoxes(props) {\n    const row = props.index;\n    return (\n      <React.StrictMode>\n        {\n          Array.from({ length: numberOfPlayers }, ((_, column) => {\n            return (\n              <td key={row + '-' + column} className='cell'>\n                <form>\n                  <select className='cell' name='clue-sheet-cell' type='select' value={checkBoxesValues[row][column]} onChange={(e) => onChangeCell(row, column, e.target.value)}>\n                    <CheckBoxOptions />\n                  </select>\n                </form>\n              </td>\n            );\n          }))\n        }\n      </React.StrictMode>\n    );\n  }\n\n  function onClickTableHeader(index) {\n    let columnHeaderValuesNew = columnHeaderValues.slice();\n    columnHeaderValuesNew[index] = prompt(\"새로운 이름을 입력하세요\");\n    setColumnHeaderValues(columnHeaderValuesNew);\n  }\n\n  function TableHeader() {\n    return (\n      <React.StrictMode key='table-header'>\n        <thead>\n          <tr>\n            <td className='empty' key={0} />\n            {\n              Array.from({ length: numberOfPlayers }, (v, i) => {\n                return (\n                  <th key={i + 1} className={columnHeaderClassNames[i]} onClick={() => {onClickTableHeader(i)}}>{columnHeaderValues[i]}</th>\n                );\n              })\n            }\n          </tr>\n        </thead>\n      </React.StrictMode>\n    );\n  }\n\n  function TableBody() {\n    let offset = 0;\n    return (\n      <React.StrictMode key='table-body'>\n        <tbody>\n          {\n            Object.keys(sheetItemData).map((key, keyIndex) => {\n              const itemRows = Array.from(sheetItemData[key], (v, i) => {\n                const index = (offset + i);\n                return (\n                  <tr key={key + '-' + keyIndex + '-' + index}>\n                    <td key={key + '-' + keyIndex + '-' + index} className={itemRowHeadersClassNames[index]}>{v}</td>\n                    <CheckBoxes index={index} />\n                  </tr>\n                )\n              });\n\n              offset += sheetItemData[key].length;\n\n              return (\n                <React.StrictMode key={key + '-' + keyIndex}>\n                  <tr key={key + '-' + keyIndex}>\n                    <td key={key} className='head'>{key + Josa.c(key, '은/는') + '?'}</td>\n                    <td key={key + '-empty'} className='empty' colSpan={numberOfPlayersDefault} />\n                  </tr>\n                  {itemRows}\n                </React.StrictMode>\n              )\n            })\n          }\n        </tbody>\n      </React.StrictMode>\n    )\n  }\n\n  return (\n    <React.StrictMode>\n      <div>\n        <NumberOfPlayersInput />\n        <NumberOfCardsPerPlayerInput />\n      </div>\n      <table>\n        <TableHeader />\n        <TableBody />\n      </table>\n    </React.StrictMode>\n  );\n}\n\nexport default ClueSheet;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport ClueSheet from './ClueSheet';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <ClueSheet />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}