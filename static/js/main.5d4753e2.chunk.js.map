{"version":3,"sources":["ClueSheet.js","reportWebVitals.js","index.js"],"names":["Icons","index","arguments","length","undefined","cellIConData","default","check","ClueSheetCell","onChange","event","_event$target","target","name","value","_this","props","row","column","console","warn","options","Array","from","get","v","i","react_default","a","createElement","key","className","type","this","React","Component","ClueSheet","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_event$target2","setState","numberOfPlayers","numberOfItems","numberOfCardsPerPlayer","onChangeCell","state","checkBoxesValues","itemRowHeadersClassNames","checkRowHeaderClassName","columnHeaderClassName","columnHeaderClassNames","checkColumnHeaderClassName","keys","sheetItemData","forEach","number","Math","floor","max","fill","map","checkBoxes","includes","filter","rows","min","defaultValue","_this3","StrictMode","_","ClueSheet_ClueSheetCell","_this4","_this5","offset","itemRows","renderCheckBoxes","Josa","c","colSpan","columns","header","renderTableHeader","body","renderTableBody","renderNumberOfPlayersInput","renderNumberOfCardsPerPlayerInput","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_ClueSheet_0"],"mappings":"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","file":"static/js/main.5d4753e2.chunk.js","sourcesContent":["import React from 'react';\nimport './ClueSheet.css';\nimport sheetItemData from './item.json'\nimport cellIConData from './icon.json'\n\nimport Josa from 'josa-js';\n\nclass Icons {\n  static index = {\n    default: 0,\n    check: 1,\n  }\n\n  static get(index = undefined) {\n    if (index === undefined)\n      return cellIConData;\n    return cellIConData[index];\n  }\n}\n\nclass ClueSheetCell extends React.Component {\n\n  onChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'clue-sheet-cell':\n        this.props.onChange(this.props.row, this.props.column, value);\n        break;\n\n      default:\n        console.warn('undefined event');\n    }\n  }\n\n  render() {\n    const options = Array.from(Icons.get(), (v, i) => <option key={(i)}>{v}</option>);\n    return (\n      <form>\n        <select className='cell' name='clue-sheet-cell' type='select' value={this.props.value} onChange={this.onChange}>\n          {options}\n        </select>\n      </form>\n    );\n  }\n}\n\nclass ClueSheet extends React.Component {\n\n  static number = { min: 2, max: 7, default: 7 }\n\n  constructor(props) {\n    super(props);\n\n    let numberOfItems = 0;\n    Object.keys(sheetItemData).forEach((v) => numberOfItems += sheetItemData[v].length);\n    const numberOfPlayers = ClueSheet.number.default;\n\n    this.state = {\n      numberOfPlayers: numberOfPlayers,\n      numberOfItems: numberOfItems,\n      numberOfCardsPerPlayer: Math.floor(numberOfItems/numberOfPlayers),\n      columnHeaderClassNames: new Array(ClueSheet.number.max).fill('head'),\n      itemRowHeadersClassNames: new Array(numberOfItems).fill('normal'),\n      checkBoxesValues: new Array(numberOfItems).fill(0).map(row => new Array(numberOfPlayers).fill(Icons.get(Icons.index.default))),\n    };\n  }\n\n  onChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'number-of-players':\n        this.setState(() => ({ numberOfPlayers: value }));\n        break;\n\n      case 'number-of-items':\n        this.setState(() => ({ numberOfItems: value }));\n        break;\n\n      case 'number-of-cards-per-player':\n        this.setState(() => ({ numberOfCardsPerPlayer: value }));\n        break;\n\n      default:\n        console.warn('undefined event');\n    }\n  }\n\n  checkRowHeaderClassName(checkBoxes, row) {\n    if (checkBoxes[row].includes(Icons.get(Icons.index.check)))\n      return 'checked';\n    return 'normal';\n  }\n\n  checkColumnHeaderClassName(checkBoxes, column) {\n    const numberOfCards = checkBoxes.filter(rows => rows[column] === Icons.get(Icons.index.check)).length;\n    if (numberOfCards >= this.state.numberOfCardsPerPlayer)\n      return 'checked';\n    return 'header';\n  }\n\n  onChangeCell = (row, column, value) => {\n    this.setState((state) => {\n      let checkBoxesValues = this.state.checkBoxesValues;\n      checkBoxesValues[row][column] = value;\n\n      let itemRowHeadersClassNames = this.state.itemRowHeadersClassNames;\n      itemRowHeadersClassNames[row] = this.checkRowHeaderClassName(checkBoxesValues, row);\n\n      let columnHeaderClassName = this.state.columnHeaderClassNames\n      columnHeaderClassName[column] = this.checkColumnHeaderClassName(checkBoxesValues, column);\n\n      return {\n        checkBoxesValues: checkBoxesValues,\n        itemRowHeadersClassNames: itemRowHeadersClassNames,\n        columnHeaderClassName: columnHeaderClassName\n      };\n    });\n  }\n\n  renderNumberOfPlayersInput() {\n    const min = ClueSheet.number.min;\n    const max = ClueSheet.number.max;\n    const defaultValue = ClueSheet.number.default;\n    const options = Array.from({ length: (max - min + 1) }, (v, i) => <option key={i}>{i + min}</option>);\n    return (\n      <form className='numer-of-players'>\n        <label>\n          {'플레이어 수: '}\n          <select name='number-of-players' className='numer-of-players' defaultValue={defaultValue} min={min} max={max} onChange={this.onChange}>\n            {options}\n          </select>\n          {' 명'}\n        </label>\n      </form>\n    );\n  }\n\n  renderNumberOfCardsPerPlayerInput() {\n    const min = 1;\n    const max = this.state.numberOfItems; // this.state.numberOfCardsPerPlayer;\n    const defaultValue = this.state.numberOfCardsPerPlayer;\n    const options = Array.from({ length: (max - min + 1) }, (v, i) => <option key={i}>{i + min}</option>);\n    return (\n      <form className='number-of-cards-per-player'>\n        <label>\n          {'1인당 카드 수: '}\n          <select name='number-of-cards-per-player' className='number-of-cards-per-player' defaultValue={defaultValue} min={min} max={max} onChange={this.onChange}>\n            {options}\n          </select>\n          {' 장'}\n        </label>\n      </form>\n    );\n  }\n\n  renderCheckBoxes(row) {\n    return (\n      <React.StrictMode>\n        {\n          Array.from({ length: this.state.numberOfPlayers }, (_, i) => (\n            <td key={i} className='cell'>\n              <ClueSheetCell\n                name='cell'\n                row={row}\n                column={i}\n                value={this.state.checkBoxesValues[row][i]}\n                onChange={this.onChangeCell}\n              />\n            </td>\n          ))\n        }\n      </React.StrictMode>\n    );\n  }\n\n  renderTableHeader() {\n    return (\n      <thead>\n        <tr>\n          <td className='empty' key={0}/>\n          {\n            Array.from({ length: this.state.numberOfPlayers }, (v, i) => {\n              return (\n                <React.StrictMode>\n                  <th key={i+1} className={this.state.columnHeaderClassNames[i]}>\n                    P{i + 1}\n                  </th>\n                </React.StrictMode>\n              );\n            })\n          }\n        </tr>\n      </thead>\n    );\n  }\n\n  renderTableBody() {\n    let offset = 0;\n    return Object.keys(sheetItemData).map((key) => {\n      const itemRows = Array.from(sheetItemData[key], (v, i) => {\n        const index = (i+offset);\n        const checkBoxes = this.renderCheckBoxes(index);\n        const className = this.state.itemRowHeadersClassNames[index];\n        return (\n            <tr key={index}>\n              <td className={className}>{v}</td>\n              {checkBoxes}\n            </tr>\n        )\n      });\n\n      offset += sheetItemData[key].length;\n\n      return (\n        <tbody>\n          <tr key={key}>\n            <td className='head'>\n              {key + Josa.c(key, '은/는') + '?'}\n            </td>\n            <td className='empty' colSpan={this.state.columns} />\n          </tr>\n          {itemRows}\n        </tbody>\n      )\n      });\n  }\n\n  render() {\n    const header = this.renderTableHeader();\n    const body = this.renderTableBody();\n    return (\n      <React.StrictMode>\n        <div>\n          {this.renderNumberOfPlayersInput()}\n          {this.renderNumberOfCardsPerPlayerInput()}\n        </div>\n        <table>\n          {header}\n          {body}\n        </table>\n      </React.StrictMode>\n    );\n  }\n}\n\nexport default ClueSheet;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport ClueSheet from './ClueSheet';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <ClueSheet />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}